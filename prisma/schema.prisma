// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  bio           String?
  password      String
  emailVerified DateTime?
  image         String?
  imageKey      String?
  isActive      String    @default("true")
  role          ROLE      @default(STUDENT)

  accounts        Account[]
  sessions        Session[]
  enrollments     Enrollment[]
  lessonProfessor Lessons[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ROLE {
  ADMIN
  PROFESSOR
  STUDENT
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Courses {
  id String @id @default(cuid())

  title       String @unique
  slug        String @unique
  description String
  imageURL    String

  lessons    Lessons[]
  enrolledOn Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("courses")
}

model Lessons {
  id String @id @default(cuid())

  name        String @unique
  slug        String @unique
  description String
  video_id    String

  course   Courses? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([courseId])
  @@index([userId])
  @@map("lessons")
}

model Enrollment {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  course   Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  canceledAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt

  @@index([userId])
  @@index([courseId])
  @@map("enrollment")
}
